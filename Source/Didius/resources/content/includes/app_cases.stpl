<script language="JavaScript" type="text/javascript">
	app.cases =
	{
		edit : function (attributes)
		{
			// Elements
			var elements = new Array ();
							
			// Functions										
			var set =			function ()
								{							
									elements.window.getUIElement ("no").setAttribute ("value", attributes.current.no);								
									elements.window.getUIElement ("createdate").setAttribute ("value", attributes.current.createtimestamp);
									
									elements.window.getUIElement ("title").setAttribute ("value", attributes.current.title);
									
									var auction = didius.auction.load (attributes.current.auctionid);																	
									elements.window.getUIElement ("auctionTitle").setAttribute ("value", auction.title +" ["+ auction.no +"]");									
									
									var onItemsDone = 	function (result)
														{													
															elements.window.getUIElement ("items").setItems (result);
														};
														
									elements.window.getUIElement ("customerReference").setAttribute ("value", attributes.current.customerreference);
									elements.window.getUIElement ("preparationFee").setAttribute ("value", attributes.current.preparationfee);
									elements.window.getUIElement ("commisionFeePercentage").setAttribute ("value", attributes.current.commisionfeepercentage);
									elements.window.getUIElement ("commisionFeeMinimum").setAttribute ("value", attributes.current.commisionfeeminimum);
									
									didius.item.list ({case: attributes.current, async: true, onDone: onItemsDone});
									
									attributes.checksum = SNDK.tools.arrayChecksum (attributes.current);
								
									onChange ();						
								};
							
			var get =			function ()
								{				
									attributes.current = didius.case.load (attributes.caseId);
								
									attributes.current.title = elements.window.getUIElement ("title").getAttribute ("value");
									attributes.current.customerreference = elements.window.getUIElement ("customerReference").getAttribute ("value");
									attributes.current.preparationfee = elements.window.getUIElement ("preparationFee").getAttribute ("value");
									attributes.current.commisionfeepercentage = elements.window.getUIElement ("commisionFeePercentage").getAttribute ("value");
									attributes.current.commisionfeeminimum = elements.window.getUIElement ("commisionFeeMinimum").getAttribute ("value");
								};
																		
			var onSave =		function ()
								{																
									// Collect forms.
									get ();
										
									// Save Customer object to database.
									didius.case.save (attributes.current);
										
									if (attributes.onDone)
									{
										setTimeout (function () {attributes.onDone (attributes.current)}, 1);
									}
									
									// Update checksum.
									attributes.checksum = SNDK.tools.arrayChecksum (attributes.current);
									onChange ();														
								};
							
			var onClose = 		function ()
								{
									elements.window.dispose ();
								};							
							
			var onItemCreate =	function ()
								{
									var current = didius.item.create (attributes.current);									
									didius.item.save (current);
								
									var row = elements.window.getUIElement ("items").addItem (current);															
									var onSave =	function (result)
													{
														elements.window.getUIElement ("items").setItem (result, row);
													};
																
									app.items.edit ({current: current, onSave: onSave});
								};
								
			var onItemEdit =	function ()
								{
									var row = elements.window.getUIElement ("items").getItemRow ()
									var onDone = 	function (result)
													{
														elements.window.getUIElement ("items").setItem (result, row);
													};																				
												
									app.items.edit ({current: didius.item.load (elements.window.getUIElement ("items").getItem ().id), onDone: onDone});			
								};
								
			var onItemDestroy = function ()
								{
									app.items.destroy ({onDone: onDone});
								
									var onDone =	function (result)
									{
										if (result == 1)
										{
											didius.item.destroy (elements.window.getUIElement ("items").getItem ().id);
											elements.window.getUIElement ("items").removeItem ();
										}
									};
									
									app.items.destroy ({onDone: onDone});
							
									SNDK.SUI.modal.dialog.confirm.show ({text: "Er du sikker på du vil slette denne effekt ?", buttonLabel1: "Ja", buttonLabel2: "Nej", onDone: onDone});
								}		
								
																					var onChange =		function ()
								{
									get ();
									
									// Checksum
									if ((SNDK.tools.arrayChecksum (attributes.current) != attributes.checksum))
									{
										elements.window.getUIElement ("save").setAttribute ("disabled", false);
									}
									else
									{
										elements.window.getUIElement ("save").setAttribute ("disabled", true);
									}															
									
									if (elements.window.getUIElement ("items").getItem ())
									{			 						 				
										elements.window.getUIElement ("itemEdit").setAttribute ("disabled", false);
										elements.window.getUIElement ("itemDestroy").setAttribute ("disabled", false);
									}
									else
									{
										elements.window.getUIElement ("itemEdit").setAttribute ("disabled", true);
										elements.window.getUIElement ("itemDestroy").setAttribute ("disabled", true);
									}			
								};
											
			var init = 			function ()
								{
									if (!attributes)
										attributes = new Array ();
																																					
									// Window 'window'			
									attributes.windowTitle = "Sag : ["+ attributes.current.no +"]";	
									elements.window = new SNDK.SUI.modal.window ({title: attributes.windowTitle, UIURL: "xml/cases/edit.xml", width: "70%", height: "70%"});
									
									// Listview 'items'
									elements.window.getUIElement ("items").setAttribute ("onDoubleClick", onItemEdit);
									elements.window.getUIElement ("items").setAttribute ("onChange", onChange);
									
									// Textbox 'title', 'auctionTitle', 'customerReference', 'preperationFee', 'commisionFeePercentage', 'commisionFeeMinimum'
									elements.window.getUIElement ("title").setAttribute ("onChange", onChange);
									elements.window.getUIElement ("auctionTitle").setAttribute ("onChange", onChange);
									elements.window.getUIElement ("customerReference").setAttribute ("onChange", onChange);
									elements.window.getUIElement ("preparationFee").setAttribute ("onChange", onChange);
									elements.window.getUIElement ("commisionFeePercentage").setAttribute ("onChange", onChange);
									elements.window.getUIElement ("commisionFeeMinimum").setAttribute ("onChange", onChange);
									
									// Buttons 'chooseAuction', 'itemCreate', 'itemEdit', 'itemDestroy'
									elements.window.getUIElement ("itemCreate").setAttribute ("onClick", onItemCreate);
									elements.window.getUIElement ("itemEdit").setAttribute ("onClick", onItemEdit);
									elements.window.getUIElement ("itemDestroy").setAttribute ("onClick", onItemDestroy);
									
									// Button 'save', 'close'
									elements.window.getUIElement ("save").setAttribute ("onClick", onSave);
									elements.window.getUIElement ("close").setAttribute ("onClick", onClose);
																										
									// Init elements.
									//SNDK.SUI.init ();
									
									// Fill forms.
									set ();
							
									// Open modal window.															
									elements.window.open ();															
							};
							
			// Initialize window
			init ();					
		},
						
		destroy : function (attributes)
		{
			var onDone =	function (result)
							{
								if (result == 1)
								{																	
									// Delete case								
									var destory = didius.case.destroy (attributes.caseId);
																																									
									// Check if any errors occured		
									if (!destory[0])
									{	
										success = false;
										
										var text = "Der er opstået en ukendt fejl under sletning af sagen.";
									
										// Cases with items connected to them cannot be deleted
										switch (destory[1][0])
										{
											case "00330":
											{
												text = "Kunne ikke finde sagen der skulle slettes, prøv igen.";	
												break;
											}
										
											case "00331":
											{
												text = "Kan ikke slette sagen da denne har tilknyttet effekter. Slet effekter og forsøg igen.";	
												break;
											}
										
										}
																									
										// Display error alert
										SNDK.SUI.modal.dialog.alert.show ({text: text, buttonLabel: "Ok"});																				
										
										if (!attributes.onDone != null)
										{
											setTimeout (function () {attributes.onDone (false)});
										}
									}														
									else
									{
										if (!attributes.onDone != null)
										{
											setTimeout (function () {attributes.onDone (true)});
										}
									}				
								}
							};
												
			// Show dialog
			SNDK.SUI.modal.dialog.confirm.show ({text: "Er du sikker på du vil slette denne sag ?", buttonLabel1: "Ja", buttonLabel2: "Nej", onDone: onDone});														
		}
	}
</script>


